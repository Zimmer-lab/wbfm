# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui/raw/progress_gui_raw.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import argparse
import importlib
import os
import sys
from pathlib import Path

import napari
import zarr
from DLC_for_WBFM.gui.utils.napari_trace_explorer import napari_trace_explorer
from PyQt5 import QtCore, QtWidgets
from DLC_for_WBFM.utils.projects.project_config_classes import ModularProjectConfig
from DLC_for_WBFM.gui.create_project_gui import CreateProjectDialog
from DLC_for_WBFM.gui.utils.file_dialog_widget import FileDialog
from DLC_for_WBFM.utils.projects.utils_project import safe_cd
from DLC_for_WBFM.utils.projects.utils_project_status import check_segmentation, check_tracking, \
    check_traces, check_training_final
from DLC_for_WBFM.utils.visualization.napari_from_config import napari_of_full_data
from DLC_for_WBFM.utils.projects.finished_project_data import napari_of_training_data, ProjectData
from backports.cached_property import cached_property


class UiMainWindow(object):

    def __init__(self, app=None):
        self.parent_qtapp = app

    def setupUi(self, MainWindow, project_path):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(491, 289)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 461, 221))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        # Top
        self.createProjectButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.createProjectButton.setObjectName("createButton")
        self.createProjectButton.clicked.connect(self.create_new_project)
        self.verticalLayout.addWidget(self.createProjectButton)

        self.loadProjectButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.loadProjectButton.setObjectName("loadButton")
        self.loadProjectButton.clicked.connect(self.load_project_file)
        self.verticalLayout.addWidget(self.loadProjectButton)

        self.checkButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.checkButton.setObjectName("checkButton")
        self.checkButton.clicked.connect(self.check_project_status)
        self.verticalLayout.addWidget(self.checkButton)

        # Specific steps
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_4 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 3, 1, 1)
        self.label_7 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_7.setObjectName("label_7")
        self.gridLayout.addWidget(self.label_7, 3, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 2, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 2, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 1, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 1, 1, 1)
        self.label_8 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_8.setObjectName("label_8")
        self.gridLayout.addWidget(self.label_8, 4, 0, 1, 1)
        self.segmentationProgress = QtWidgets.QProgressBar(self.verticalLayoutWidget)
        self.segmentationProgress.setProperty("value", 0)
        self.segmentationProgress.setObjectName("segmentationProgress")
        self.gridLayout.addWidget(self.segmentationProgress, 1, 1, 1, 1)
        self.trainingProgress = QtWidgets.QProgressBar(self.verticalLayoutWidget)
        self.trainingProgress.setProperty("value", 0)
        self.trainingProgress.setObjectName("trainingProgress")
        self.gridLayout.addWidget(self.trainingProgress, 2, 1, 1, 1)
        self.trackingProgress = QtWidgets.QProgressBar(self.verticalLayoutWidget)
        self.trackingProgress.setProperty("value", 0)
        self.trackingProgress.setObjectName("trackingProgress")
        self.gridLayout.addWidget(self.trackingProgress, 3, 1, 1, 1)
        self.tracesProgress = QtWidgets.QProgressBar(self.verticalLayoutWidget)
        self.tracesProgress.setProperty("value", 0)
        self.tracesProgress.setObjectName("tracesProgress")
        self.gridLayout.addWidget(self.tracesProgress, 4, 1, 1, 1)

        # Visualization buttons
        self.segVisButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.segVisButton.setObjectName("pushButton_2")
        self.segVisButton.clicked.connect(self.napari_for_masks)
        self.segVisButton.setToolTip('Visualize segmentation (untracked)')
        self.gridLayout.addWidget(self.segVisButton, 1, 2, 1, 1)
        self.trainingVisButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.trainingVisButton.setObjectName("trainingVisButton")
        self.trainingVisButton.clicked.connect(self.napari_for_masks_training)
        self.trainingVisButton.setToolTip('Visualize training data (segmentation overlaid on raw data)')
        self.gridLayout.addWidget(self.trainingVisButton, 2, 2, 1, 1)
        self.trackingVisButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.trackingVisButton.setObjectName("trackingVisButton")
        self.trackingVisButton.clicked.connect(self.napari_for_masks_tracking)
        self.trackingVisButton.setToolTip('Visualize tracked data (segmentation overlaid on raw data)')
        self.gridLayout.addWidget(self.trackingVisButton, 3, 2, 1, 1)
        self.tracesVisButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.tracesVisButton.setObjectName("pushButton_5")
        self.tracesVisButton.clicked.connect(self.open_traces_gui)
        self.tracesVisButton.setToolTip('Visualize traces of neurons 1-by-1')
        self.gridLayout.addWidget(self.tracesVisButton, 4, 2, 1, 1)

        # Do step buttons
        self.segmentationButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.segmentationButton.setObjectName("pushButton_6")
        self.segmentationButton.clicked.connect(self.do_segmentation)
        self.gridLayout.addWidget(self.segmentationButton, 1, 3, 1, 1)
        self.trainingButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.trainingButton.setObjectName("pushButton_7")
        self.trainingButton.clicked.connect(self.do_tracklet_generation)
        self.gridLayout.addWidget(self.trainingButton, 2, 3, 1, 1)
        self.trackingButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.trackingButton.setObjectName("pushButton_8")
        self.trackingButton.clicked.connect(self.do_dlc_training_and_tracking)
        self.gridLayout.addWidget(self.trackingButton, 3, 3, 1, 1)
        self.tracesButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.tracesButton.setObjectName("pushButton_9")
        self.tracesButton.clicked.connect(self.do_final_traces)
        self.gridLayout.addWidget(self.tracesButton, 4, 3, 1, 1)

        self.verticalLayout.addLayout(self.gridLayout)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 491, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Load project path
        self.is_loaded = False
        self.project_dir = None
        self.project_file = project_path

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.createProjectButton.setText(_translate("MainWindow", "TODO - Create Project"))
        self.loadProjectButton.setText(_translate("MainWindow", "Load Project"))
        self.checkButton.setText(_translate("MainWindow", "Check Project Status"))
        self.label_4.setText(_translate("MainWindow", "Do"))
        self.label_7.setText(_translate("MainWindow", "3. Tracking"))
        self.label_6.setText(_translate("MainWindow", "2. Training data"))
        self.label_3.setText(_translate("MainWindow", "Visualize"))
        self.label_5.setText(_translate("MainWindow", "1. Segmentation"))
        self.label.setText(_translate("MainWindow", "Step"))
        self.label_2.setText(_translate("MainWindow", "Status"))
        self.label_8.setText(_translate("MainWindow", "4. Traces"))
        self.segVisButton.setText(_translate("MainWindow", "SegVis"))
        self.trainingVisButton.setText(_translate("MainWindow", "TrainingVis"))
        self.trackingVisButton.setText(_translate("MainWindow", "TrackingVis"))
        self.tracesVisButton.setText(_translate("MainWindow", "TracesVis"))
        self.segmentationButton.setText(_translate("MainWindow", "Segment"))
        self.trainingButton.setText(_translate("MainWindow", "Make Training data"))
        self.trackingButton.setText(_translate("MainWindow", "Track"))
        self.tracesButton.setText(_translate("MainWindow", "Make Traces"))

    def do_segmentation(self):
        # Runs in a new process
        print("Running step 1")
        mod = importlib.import_module("DLC_for_WBFM.scripts.1-segment_video", package="DLC_for_WBFM")
        config_updates = {'project_path': self.project_file, 'DEBUG': False}
        mod.ex.run(config_updates=config_updates)

    def do_tracklet_generation(self):
        # Runs in a new process
        print("Running step 2")
        mod = importlib.import_module("DLC_for_WBFM.scripts.2-produce_training_data", package="DLC_for_WBFM")
        config_updates = {'project_path': self.project_file, 'DEBUG': False}
        mod.ex.run(config_updates=config_updates)

    def do_dlc_training_and_tracking(self):
        # Runs in a new process
        print("Running step 3a")
        mod = importlib.import_module("DLC_for_WBFM.scripts.3a-initialize_dlc_stack", package="DLC_for_WBFM")
        config_updates = {'project_path': self.project_file, 'DEBUG': False}
        mod.ex.run(config_updates=config_updates)

        print("Running step 3b")
        mod = importlib.import_module("DLC_for_WBFM.scripts.3b-train_all_dlc_networks", package="DLC_for_WBFM")
        mod.ex.run(config_updates=config_updates)

        print("Running step 3c")
        mod = importlib.import_module("DLC_for_WBFM.scripts.3c-make_full_tracks", package="DLC_for_WBFM")
        mod.ex.run(config_updates=config_updates)

    def do_final_traces(self):
        # Runs in a new process
        print("Running step 4")
        mod = importlib.import_module("DLC_for_WBFM.scripts.4-make_full_traces", package="DLC_for_WBFM")
        config_updates = {'project_path': self.project_file, 'DEBUG': False}
        mod.ex.run(config_updates=config_updates)

    def load_project_file(self):
        ex = FileDialog()
        self.project_file = ex.fileName

    def create_new_project(self):
        # Opens new GUI dialog box
        self.ex = CreateProjectDialog()
        # self.ex.setWindowModality(QtCore.Qt.ApplicationModal)
        self.ex.exec()

        self.project_file = os.path.join(self.ex.project_foldername, "project_config.yaml")

    @property
    def project_file(self):
        return self._project_file

    @project_file.setter
    def project_file(self, value):
        if value is None:
            return

        is_valid = self.check_valid_project(value)
        if is_valid:
            self.is_loaded = True
            self._project_file = value
            print(f"Loading project: {self.project_file}")
            self.project_dir = Path(value).parent
            with safe_cd(self.project_dir):
                self._load_config_files(value)
            self.check_project_status()
        else:
            print(f"Project {value} is not a valid project")

    @cached_property
    def project_data(self):
        return ProjectData.load_final_project_data_from_config(self.project_file,
                                                               to_load_tracklets=True,
                                                               to_load_segmentation_metadata=True)

    @property
    def preprocessed_red(self):
        return self.project_data.red_data

    @property
    def preprocessed_green(self):
        return self.project_data.green_data

    def check_valid_project(self, value):
        # TODO
        return os.path.exists(value)

    def check_project_status(self):
        seg_status = check_segmentation(self.project_file)
        if seg_status:
            self.segmentationProgress.setValue(100)
        else:
            self.segmentationProgress.setValue(0)
        training_status = check_training_final(self.project_file)
        # print(f"training: {training_status}")
        if training_status:
            self.trainingProgress.setValue(100)
        else:
            self.trainingProgress.setValue(0)
        tracking_status = check_tracking(self.project_file)
        # print(f"tracking_status: {tracking_status}")
        if tracking_status:
            self.trackingProgress.setValue(100)
        else:
            self.trackingProgress.setValue(0)
        traces_status = check_traces(self.project_file)
        # print(f"traces_status: {traces_status}")
        if traces_status:
            self.tracesProgress.setValue(100)
        else:
            self.tracesProgress.setValue(0)

    def _load_config_files(self, project_path):
        cfg = ModularProjectConfig(project_path)
        self.cfg = cfg
        self.segment_cfg = cfg.get_segmentation_config()
        # TODO: The segmentation path may be different from the overall folder
        seg_path = self.segment_cfg.config['output_masks']
        self.segment_zarr = zarr.open(seg_path)
        # other_project = get_project_of_substep(segment_fname)
        # with safe_cd(other_project):
        #     seg_path = self.segment_cfg['output_masks']
        #     self.segment_zarr = zarr.open(seg_path)
        self.tracking_cfg = cfg.get_tracking_config()
        self.traces_cfg = cfg.get_traces_config()

    def napari_for_masks(self):
        """Open napari window for segmentation before tracking"""
        self.viewer = napari.Viewer(ndisplay=3)
        which_layers = ['Red data', 'Green data', 'Raw segmentation']
        self.project_data.add_layers_to_viewer(self.viewer, which_layers=which_layers)
        self.viewer.show()

    def napari_for_masks_tracking(self):
        """Open napari window for segmentation colored by tracking"""
        self.viewer = napari.Viewer(ndisplay=3)
        which_layers = ['Red data', 'Green data', 'Raw segmentation', 'Intermediate global IDs']
        self.project_data.add_layers_to_viewer(self.viewer, which_layers=which_layers)
        self.viewer.show()
        # self.viewer = napari_of_full_data(self.project_dir)[0]
        # self.viewer.add_image(self.preprocessed_red)

    def napari_for_masks_training(self):
        """Open napari window for segmentation for just the training data"""
        self.viewer, _, _ = napari_of_training_data(self.cfg)

    def open_traces_gui(self):
        # Build object that has all the data
        project_data = self.project_data
        # project_data = ProjectData.load_final_project_data_from_config(self.project_file,
        #                                                                to_load_tracklets=True,
        #                                                                to_load_segmentation_metadata=True)
        ui, viewer = napari_trace_explorer(project_data, to_print_fps=True)
        self.viewer = viewer
        self.viewer.show()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Build GUI with a project')
    parser.add_argument('--project_path', default=None,
                        help='path to config file')
    parser.add_argument('--DEBUG', default=False,
                        help='')
    args = parser.parse_args()

    # Basic setup
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = UiMainWindow(app)
    # Get project settings
    project_path = args.project_path
    # Actually build window
    ui.setupUi(MainWindow, project_path)
    MainWindow.show()
    sys.exit(app.exec_())
